%%%%%%%%%%%%%%%%%%%%%%
% PROV-IDB 
%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%
%% arities for all terms
%%%%%%%%%%%%%%%%%%%%%%%%

% entity(eID, Attrs)
% activity( Actid, start-time , end-ttime , attribute_values )
% agent(AgId, Attrs)

% wasGeneratedBy(Entity, Activity, Attrs, Time)
%  wasStartedBy(Activity, Entity, Attrs)
% actedOnBehalfOf(Ag2,Ag1,Activity,Attrs).
% wasDerivedFrom(toEid, fromEid, actId, attribute_values) 
% wasAssociatedWith ( aidentifier, agidentifier, planidentifier, attribute_values )

% note: for all elements that admit a list of attribute value pairs, the ID is not optional, 
% because attributes are represented using separate terms and thus there is a  need to join
% the element with its attributes using the element's ID.

%%%%%%%%%%%%%%%%%%%%%%%%
%% temporal precedence
%%%%%%%%%%%%%%%%%%%%%%%%

% precedence is anti-symmetric
:- precedes(T1,T2), precedes(T2,T1), T1 != T2.

% precedence is transitive
precedes(T1,T3)  :- precedes(T1,T2), precedes(T2,T3), T1 != T3.

%%%%%%%%%%%%%%%%%%%%%%%%
%% subclass rules
%%%%%%%%%%%%%%%%%%%%%%%%

% Activities and Entities are disjoint 
:- activity(X,St,Et,Attrs), entity(X,Attrs2).

% agents are entities
entity(X, Attrs)  :- agent(X, Attrs).


%%%%%%%%%%%%%%%%%%%%%%%%
%% Event ordering rules
%%%%%%%%%%%%%%%%%%%%%%%%

% Start-precedes-end constraint 
precedes(T1, T2) :- activity(_, T1, T2, _). %, T1 != nil, T2 != nil.

% Generation-precedes-usage
precedes(T2,T1)  :- used( _, E, _,T1), wasGeneratedBy(E, _, _, T2), T1 != nil, T2 != nil.

% usage-within-activity: inference
precedes(T1, UT) :- activity(A,  T1, _, _), used(A,_, _,UT), T1 != nil, UT != nil.
precedes(UT, T2) :- activity(A,  _, T2, _), used(A,_, _,UT), T2 != nil, UT != nil.

% generation-within-activity
precedes(T1, GT) :- activity(A, T1, _, _), wasGeneratedBy(_,A,_, GT), T1 != nil, GT != nil.
precedes(GT, T2) :- activity(A, _, T2, _), wasGeneratedBy(_,A,_, GT),  T2 != nil, GT != nil.

%%% extended derivation loops

:- derivable(E2, E1), derivable(E1, E2).  % trivial loop

 derivable(E2, E1) :- wasDerivedFrom(E2, E1,_,_) , E1 != E2.
 derivable(E2, E1) :-  derivable(E2, E0),  derivable(E0, E1).

% derivation-usage-generation-ordering
precedes(T2,T1)  :- wasDerivedFrom(E2, E1,_,_), used(_,E1, _,T2), wasGeneratedBy( E2, _, _, T1), T1 != nil, T2 != nil.

% derivation-generation-generation-ordering   
precedes(T1,T2)  :- wasDerivedFrom(E2, E1, _,_), wasGeneratedBy( E2, _, _, T2), wasGeneratedBy( E1, _, _, T1), T1 != nil, T2 != nil.

% wasInformedBy-ordering
precedes(ST1, ET2) :-  wasInformedBy(A2, A1,_), activity(A1, ST1, _, _), activity(A2, _, ET2, _), ST1 != nil, ET2 != nil.

% wasStartedBy-ordering
precedes(ST1, ST2) :- wasStartedBy(A2,A1,_), activity(A1, ST1,_,_), activity(A2, ST2, _, _), ST1 != nil, ST2 != nil.


%%%%%%%%%%%%%%%%%%%%%%%%
%% Structural constraints
%%%%%%%%%%%%%%%%%%%%%%%%

% generation-uniqueness constraint.
:- activity(A1,_, _, _), activity(A2,_,_,_), wasGeneratedBy( E, A1, _,_),  wasGeneratedBy( E, A2, _,_), A1 != A2.

% derivation-use
used(A,E1, Attrs, T)  :- wasDerivedFrom(E2, E1,_, Attrs), wasGeneratedBy( E2, A, Attrs, T).	

%%%%%%%%%%%%%%%%%%%%%%%%
%% Element-specific rules        
%%%%%%%%%%%%%%%%%%%%%%%%

%  association-agent
agent(E, Attrs) :- entity(E, Attrs), wasAssociatedWith(_,E,_,Attrs).

% derivation-implication  (activity specification)
wasDerivedFrom(E2, E1, A, Attrs)  :-  wasDerivedFrom(E2, E1,_, Attrs), wasGeneratedBy( E2, A, _, _), used( A,E1,_,_).

% specializationOf is transitive
specializationOf(E3,E1) :- specializationOf(E3,E2), specializationOf(E2,E1).

% anti-symmetry of specialization
:- specializationOf(E3,E2), specializationOf(E2,E3), E2 != E3.

% Symmetry of alternate
:- alternateOf(E1,E2), alternateOf (E2,E1), E2 != E1.

%%%%%%%%%%%%%%%%%%%%%%%%
% traceability
%%%%%%%%%%%%%%%%%%%%%%%%

% Derivation implies traceability (1,2)
tracedTo(E2, E1) :- wasDerivedFrom(E2,E1,_,_).   

% Traceability of agent for a generating activity (3)
tracedTo(E2, Agent) :- wasGeneratedBy( E2,A,_,_), wasAssociatedWith(A,Agent,_,_).  

% Traceability of a delegated agent for a generating activity (4)
tracedTo(Ag2, Ag1) :- wasGeneratedBy( E2,A,_,_), wasAssociatedWith(A,Ag1,_,_), actedOnBehalfOf(Ag2,Ag1,A,_).

% Traceability by starting and generating activities (5)
tracedTo(E2, E1) :- wasStartedBy(A,E1,_), wasGeneratedBy( E2,A,_,_).

% transitivity of traceability
tracedTo(E3, E1) :- tracedTo(E3, E2), tracedTo(E2,E1).

%% wasInformedBy-Definition
wasInformedBy(A2, A1,nil) :- wasGeneratedBy( E, A1, _, _), used( A2, E, _, _).

% wasStartedBy (partial)
wasStartedBy(A2,A1, Attrs) :-  wasGeneratedBy(E,A1,_,_), wasStartedBy(A2,E,Attrs).

% Delegation implies association
wasAssociatedWith(A, Ag, nil, Attrs) :- actedOnBehalfOf(Ag, _, A, Attrs).

wasDerivedFrom(E2, E1, nil,nil) :- wasRevisionOf(E2, E1, _).

%%%%%%%%%%%%%%%%%%%%%%%%
%% collections
%%%%%%%%%%%%%%%%%%%%%%%%

% collection unique insertion/removal
 :-  derivedByInsertionFrom(C1, C, K1,_), derivedByInsertionFrom(C1, C, K2,_), K1 != K2.
 :-  derivedByRemovalFrom(C1, C, K1), derivedByDeletionFrom(C1, C, K2), K1 != K2.
 :- derivedByInsertionFrom(C1,C,K,V1), derivedByInsertionFrom(C1, C,K,V2),  V1 != V2. 
 :-  derivedByRemovalFrom(C1, C, K1), derivedByDeletionFrom(C1, C, K2), K1 != K2.

% collection unique ancestor
 :-  derivedByInsertionFrom(C, C1, _,_), derivedByInsertionFrom(C, C2, _,_), C1 != C2.
 :-  derivedByRemovalFrom(C, C1,_), derivedByRemovalFrom(C, C2, _), C1 != C2.



